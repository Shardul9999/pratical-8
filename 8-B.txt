#include <iostream>
using namespace std;


struct Node {
    int data;
    Node* next;
};


class Queue {
private:
    Node* front; 
    Node* rear; 

public:
   
    Queue() {
        front = nullptr;
        rear = nullptr;
    }

    
    bool isEmpty() {
        return (front == nullptr);
    }

    
    void enqueue(int value) {
        Node* newNode = new Node(); 
        newNode->data = value;     
        newNode->next = nullptr;    

        if (rear == nullptr) {
            front = rear = newNode; 
        } else {
            rear->next = newNode; 
            rear = newNode;       
        }
        cout << "Added " << value << " to the queue." << endl;
    }

    
    void dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty! Cannot delete elements." << endl;
        } else {
            Node* temp = front;       
            cout << "Deleted " << temp->data << " from the queue." << endl;
            front = front->next;       

            if (front == nullptr) {    
                rear = nullptr;        
            }
            delete temp;              
        }
    }

   
    void printQueue() {
        if (isEmpty()) {
            cout << "Queue is empty!" << endl;
        } else {
            Node* temp = front;
            cout << "Queue elements: ";
            while (temp != nullptr) {
                cout << temp->data << " ";
                temp = temp->next;
            }
            cout << endl;
        }
    }
};


int main() {
    Queue q;
    int choice, value;

    do {
     
        cout << "\n--- Queue Menu ---\n";
        cout << "1. Add (Enqueue)\n";
        cout << "2. Delete (Dequeue)\n";
        cout << "3. Print Queue\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

       
        switch (choice) {
        case 1:
            cout << "Enter a value to add: ";
            cin >> value;
            q.enqueue(value);
            break;

        case 2:
            q.dequeue();
            break;

        case 3:
            q.printQueue();
            break;

        case 4:
            cout << "Exiting the program. Goodbye!" << endl;
            break;

        default:
            cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 4);

    return 0;
}
