#include <iostream>
using namespace std;

#define SIZE 5 

class CircularQueue {
private:
    int arr[SIZE];
    int front, rear;

public:
   
    CircularQueue() {
        front = -1;
        rear = -1;
    }

   
    bool isEmpty() {
        return (front == -1);
    }

   
    bool isFull() {
        return ((rear + 1) % SIZE == front);
    }

   
    void enqueue(int value) {
        if (isFull()) {
            cout << "Queue is full! Cannot add more elements." << endl;
        } else {
            if (isEmpty()) {
                front = 0; 
            }
            rear = (rear + 1) % SIZE; 
            arr[rear] = value;
            cout << "Added " << value << " to the queue." << endl;
        }
    }

    
    void dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty! Cannot delete elements." << endl;
        } else {
            cout << "Deleted " << arr[front] << " from the queue." << endl;
            if (front == rear) {
                
                front = rear = -1;
            } else {
                front = (front + 1) % SIZE; 
            }
        }
    }

  
    void printQueue() {
        if (isEmpty()) {
            cout << "Queue is empty!" << endl;
        } else {
            cout << "Queue elements: ";
            int i = front;
            while (true) {
                cout << arr[i] << " ";
                if (i == rear) break;
                i = (i + 1) % SIZE; 
            }
            cout << endl;
        }
    }
};


int main() {
    CircularQueue q;
    int choice, value;

    do {
        
        cout << "\n--- Circular Queue Menu ---\n";
        cout << "1. Add (Enqueue)\n";
        cout << "2. Delete (Dequeue)\n";
        cout << "3. Print Queue\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

       
        switch (choice) {
        case 1:
            cout << "Enter a value to add: ";
            cin >> value;
            q.enqueue(value);
            break;

        case 2:
            q.dequeue();
            break;

        case 3:
            q.printQueue();
            break;

        case 4:
            cout << "Exiting the program. Goodbye!" << endl;
            break;

        default:
            cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 4);

    return 0;
}
